
#include <iostream>
using namespace std;

int main() {
	cout << "!!!Hello World!!!" << endl;
	return 0;
}

/*
 * There is IDProducer instance before the first middlebox in each chain and after each
 * middlebox that change the packet content (whether it's the packet header or the packet
 * payload). The IDProducer instance is independent of the middlebox logic.
 * IDProducerI:
 * 	- void init(int id): set unique id for the id producer instance (which will be
 * 		prefix for all ids generated by this instance).
 * 	- bool hasID(packet): returns true if an id was added to this packet by some id producer
 * 	- int generateId: generate a new id, based on the instance uniqueId.
 * 	- void incrementAndSetId(packet): add 1 to the id and update the packet id.
 *
 *-------------------------------------------------------------------------------------------
 *
 * There is one WrappedPacketsLoggerManager for each wrapped packets logger. In case of
 * centralized logger, one manager instance will be created.
 * WrappedPacketsLoggerManager:
 * 	- void init(int wplmId): set the wrapped packet logger manager id.
 * 	- bool save(int packetId, WPLRecord wplRecord): save the received wplRecord (the value) to the log for
 * 											  the received packet id (the key). Returns true
 * 											  upon success.
 * 	- WPLRecord load(int packetId): load the wplRecord that was saved for the received packet id.
 * 								 Returns null upon failure.
 *
 *-------------------------------------------------------------------------------------------
 *
 *	There is one client for each middlebox that change the packet content (whether the header or
 *	the payload) and before the first middlebox in each chain. The client will be responsible
 *	to communicate with wrappedPacketsLoggerManager.
 * 	WrappedPacketsLoggerClient:
 * 		- void init(int id, ConnectionInfo managerConnectionInfo, int saveFromByte,
 * 					int saveToByte): init the client with the following data:
 * 						# id - This method creates an IDProducer instance and set the received
 * 							   id as an IDProducer id.
 * 						# managerConnectionInfo - it contains all the data relevant for
 * 												  communicating with the appropriate
 * 												  WrappedPacketsLoggerManager (for example: ip
 * 												  address, port num, etc.).
 * 						# saveFromByte, saveToByte - all the bytes in
 * 													 range [saveFromByte, saveToByte] should be
 * 													 saved (related to the middlebox that change
 * 													 them). In case that the client stands before
 * 													 the first middlebox (the first entity in
 * 													 the chain) it expects to receive 0,MAX_INT.
 * 		- WPLRecord generateWPLRecord(String packet): generate wplRecord from the received packet by
 * 												taking into account saveFromByte and saveToByte.
 * 		- bool saveWPLRecord (int packetId, WPLRecord wplRecord): save the wplRecord by using
 * 													 managerConnectionInfo. Returns true upon
 * 													 success.
 * 		- bool savePacket(String packet): generate a new id for the packet (set a new one or
 * 										  increase the existing one by 1), generateWPLRecord and
 * 										  then call to saveWPLRecord(packetId, wplRecord).
 * 										  Returns true upon success.
 * 		- WPLRecord loadWPLRecord(int packetId): returns the *wplRecord* associated to the received
 * 										   packetId. The wplRecord contains only the diff to the
 * 										   previous packet version.
 * 		- Packet loadPacket(int packetId): returns the *packet* associated to the received
 * 										   packetId (by building it iteratively). It returns null
 * 										   in case of a failure.
 *
 *-------------------------------------------------------------------------------------------
 *
 *	Represents a wrapped packet logger record to be stored in the wrapped packets logger.
 *	WPLRecord:
 *		- int getFromByte(): returns the first byte number that is changed *in the previous*
 *							 version.
 *		- int getToByte(): returns the last byte number that is changed *in the previous* version.
 *		- String getContent(): returns the changed content. Note that the size of the received
 *							   string may be differ than getToByte()-getFromByte() (for example by
 *							   replacing 6 characters with 4 characters).
 *
 *-------------------------------------------------------------------------------------------
 *
 *	There is one DetLoggerManager for each determinants logger. In case of centralized logger,
 *	one manager instance will be created.
 *	DetLoggerManager:
 *		- void init(int dtmId): set the determinant logger manager id.
 *		- bool save(EPAL epal): save the received extended PAL (the value) to the log. Returns
 *								true upon success.
 *		- Map<packetId, list<EPAL>> getDeterminantsForMBId(int middleboxId): returns a map
 *			between all the existing packet ids in the log to a list of all of their EPALs.
 *			It returns null in case of an error.
 *		- list<packetId> getAllStoredPacketIds(): returns a list of all the stored packet ids.
 *												  Basically the manager should keep in his RAM
 *												  all the available stored packet ids (in case
 *												  of a manager failure only the first call to
 *												  this method will take time).
 *
 *-------------------------------------------------------------------------------------------
 *	EPAL (Extended PAL):
 *		- constructors, getters and setters
 *
 *-------------------------------------------------------------------------------------------
 *-------------------------------------------------------------------------------------------
 */
